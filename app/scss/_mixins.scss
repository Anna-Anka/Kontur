@mixin link {
    position: relative;
    transition: color 0.3s, opacity 0.3s;

    &::after {
        content: "";
        position: absolute;
        bottom: -5px;
        left: 0;
        right: 0;
        width: 0%;
        height: 2px;
        background-color: $accent;
        border-radius: 1px;
        transition: width 0.3s ease-in-out;
    }

    &:hover {
        &::after {
            width: 100%;
        }
    }

    &:active {
        color: $excretion;
    }

    &:focus {
        border: 2px solid $accent;
        border-radius: 5px;

        &::after {
            width: 0;
        }
    }
}

@mixin underline {
    position: relative;

    &::after {
        content: "";
        position: absolute;
        bottom: -5px;
        left: 0;
        right: 0;
        width: 100%;
        height: 2px;
        background-color: $accent;
        border-radius: 1px;

        @include max-w($lg) {
            bottom: 0;
        }
    }
}

@mixin blackout {
    content: "";
    position: absolute;
    top: 0;
    bottom: 0;
    width: 100%;
    background-color: $blackout;
    transition: opacity 0.3s;
}

@mixin backgorund {
    content: "";
    position: absolute;
    top: 0;
    bottom: 0;
    right: 0;
    left: 0;
    width: 100%;
    z-index: 1;
    background-repeat: no-repeat;
    background-size: cover;
}

@mixin slick-arrow {
    position: absolute;
    border: none;
    border-radius: 50%;
    cursor: pointer;
    background-repeat: no-repeat;
    background-position: center center;
    background-size: 40px 30px;
    z-index: 15;
    font-size: 0;
    transition: background-color 0.3s, opacity 0.3s;
}

//line-clamp

/// @param {Value}          $font-size    
/// @param {Unitless Value} $line-height 
/// @param {Number}         $lines-to-show 
/// @example scss
/// p {
///   @include line-clamp($font-size: 16px, $line-height: 1.5, $lines-to-show: 3);
/// }
@mixin line-clamp($font-size,
    $line-height,
    $lines-to-show) {
    @if unitless($line-height)==false {
        $line-height: create-unitless-line-height($font-size, $line-height);
    }

    display: block;
    display: -webkit-box;
    font-size: $font-size;
    max-height: ($font-size * $line-height * $lines-to-show);
    line-height: $line-height;
    overflow: hidden;
    text-overflow: ellipsis;
    -webkit-box-orient: vertical;
    -webkit-line-clamp: $lines-to-show;
}


//Адаптив
@mixin max-w($width) {
    @media only screen and (max-width: $width+ "px") {
        @content;
    }
}

@mixin min-w($width) {
    @media only screen and (min-width: $width+ "px") {
        @content;
    }
}

//Адаптивное свойство
$maxWidth: 1920;
$maxWidthContainer: 1200;
//Пример 
//@include adaptiv-value("padding", 30, 5, 0);
@mixin adaptiv-value($property, $startSize, $minSize, $type) {
    $addSize: $startSize - $minSize;
    @if $type==1 {
        //Только если меньшe контейнера
        #{$property}: $startSize + px;
        @media (max-width: #{$maxWidthContainer + px}) {
            #{$property}: calc(#{$minSize + px} + #{$addSize} * ((100vw - 320px) / #{$maxWidthContainer - 320}));
        }
    } @else if $type==2 {
        //Только если больше контейнера
        #{$property}: $startSize + px;
        @media (min-width: #{$maxWidthContainer + px}) {
            #{$property}: calc(#{$minSize + px} + #{$addSize} * ((100vw - 320px) / #{$maxWidth - 320}));
        }
    } @else {
        //Всегда
        #{$property}: calc(#{$minSize + px} + #{$addSize} * ((100vw - 320px) / #{$maxWidth - 320}));
    }
}